(app.py)pythonimport streamlit as stfrom hugchat import hugchatfrom hugchat.login import Login  App title st.set_page_config(page_title="NelsonBot - Your Pediatric Knowledge Assistant")  Hugging Face Credentials with st.sidebar: st.title('NelsonBot') if ('EMAIL' in st.secrets) and ('PASS' in st.secrets): st.success('HuggingFace Login credentials already provided!', icon='‚úÖ') hf_email = st.secrets['EMAIL'] hf_pass = st.secrets['PASS'] else: hf_email = st.text_input('Enter E-mail:', type='password') hf_pass = st.text_input('Enter password:', type='password') if not (hf_email and hf_pass): st.warning('Please enter your credentials!', icon='‚ö†Ô∏è') else: st.success('Proceed to entering your prompt message!', icon='üëâ') st.markdown('üìñ Learn how to build this app in this [blog](https://blog.streamlit.io/how-to-build-an-llm-powered-chatbot-with-streamlit/)!')   Initialize session state if "messages" not in st.session_state: st.session_state.messages = [{"role": "assistant", "content": "How may I assist you today?"}]   Display chat messages for message in st.session_state.messages: with st.chat_message(message["role"]): st.write(message["content"])   Clear chat history function def clear_chat_history(): st.session_state.messages = [{"role": "assistant", "content": "How may I assist you today?"}] st.sidebar.button('Clear Chat History', on_click=clear_chat_history)   Function to generate LLM response def generate_response(prompt_input, email, passwd): try:   Hugging Face Login sign = Login(email, passwd) cookies = sign.login()   Create ChatBot chatbot = hugchat.ChatBot(cookies=cookies.get_dict()) system_message = "You are a helpful assistant."   Build conversation context for dict_message in st.session_state.messages: if dict_message["role"] == "user": system_message += f"User: {dict_message['content']}\n" else: system_message += f"Assistant: {dict_message['content']}\n" prompt = f"{system_message} {prompt_input} Assistant: " return chatbot.chat(prompt) except Exception as e: st.error(f"An error occurred during response generation: {e}", icon='üö®') return "Sorry, an error occurred while processing your request."   User-provided prompt if prompt := st.chat_input(disabled=not (hf_email and hf_pass)): st.session_state.messages.append({"role": "user", "content": prompt}) with st.chat_message("user"): st.write(prompt)   Generate a new response if the last message is from the user if st.session_state.messages and st.session_state.messages[-1]["role"] == "user": with st.chat_message("assistant"): with st.spinner("Thinking..."): response = generate_response(prompt, hf_email, hf_pass) st.write(response) message = {"role": "assistant", "content": response} st.session_state.messages.append(message)